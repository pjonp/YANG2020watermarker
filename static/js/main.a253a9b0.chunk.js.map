{"version":3,"sources":["index.js"],"names":["watermark","require","watermarkOptions","cropper","ReactDOM","render","useState","selectedWatermark","setSelectedWatermark","watermarkLevel","setWatermarkLevel","useEffect","buildCropper","changeWaterMark","e","parseInt","target","id","cropBox","document","querySelector","cropPreview","Cropper","aspectRatio","minCropBoxWidth","dragMode","cropBoxMovable","crop","debounce","canvas","getCroppedCanvas","src","toDataURL","buildWatermarkOptions","map","i","j","className","key","alt","process","onClick","type","accept","name","onChange","preventDefault","upload","files","length","endsWith","destroy","reader","FileReader","onload","r","result","readAsDataURL","alert","style","opacity","min","max","value","Math","round","class","onInput","cropSelection","minWidth","maxWidth","imageSmoothingQuality","dataUrl","image","center","then","url","downloadAnchor","setAttribute","click","href","download","getElementById"],"mappings":"+NAMMA,G,YAAYC,EAAQ,KAGpBC,EAAmB,CAAC,wBAAwB,wBAAwB,yBACtEC,EAAU,GA6GdC,IAASC,OAAO,mBA3GhB,WAAoC,IAAD,EACiBC,mBAAS,GAD1B,mBAC1BC,EAD0B,KACPC,EADO,OAEWF,mBAAS,KAFpB,mBAE1BG,EAF0B,KAEVC,EAFU,KAIjCC,qBAAW,WACPC,MACA,IAEJ,IAAMC,EAAkB,SAACC,GACvBN,EAAqBO,SAASD,EAAEE,OAAOC,MAOnCL,EAAe,WACnB,IAAIM,EAAUC,SAASC,cAAc,cACjCC,EAAcF,SAASC,cAAc,gBACzCjB,EAAU,IAAImB,IAAQJ,EAAS,CAC3BK,YAAa,EACbC,gBAAiB,IACjBC,SAAU,OACVC,gBAAgB,EAChBC,KAAMC,KAAS,WACb,IAAIC,EAAS1B,EAAQ2B,mBACrBT,EAAYU,IAAMF,EAAOG,UAAU,eAClC,MAIHC,EAAwB/B,EAAiBgC,KAAK,SAACC,EAAEC,GACnD,OAAO,yBAAKC,UAAU,kBAAkBpB,GAAE,UAAKmB,EAAL,mBAAyBE,IAAG,yBAAoBF,GAAKG,IAAKJ,EAAGJ,IAAKS,6BAAyBL,EAAGM,QAAS5B,OAiDrJ,OACE,yBAAKI,GAAG,2BACN,yBAAKA,GAAG,oBACLgB,GAEH,2BAAOhB,GAAG,cAAcyB,KAAK,OAAOC,OAAO,aAAaC,KAAK,QAAQC,SAnDrD,SAAC/B,GACjBA,EAAEgC,iBACF,IAAIC,EAASjC,EAAEE,OAAOgC,MACtB,GAAqB,IAAlBD,EAAOE,OAAV,CACA,IAAI/B,EAAUC,SAASC,cAAc,cAErC,GAAI2B,EAAO,GAAGH,KAAKM,SAAS,SAAYH,EAAO,GAAGH,KAAKM,SAAS,QAAhE,CAKA/C,EAAQgD,UAER,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAAC,GACZrC,EAAQqB,IAAK,sBACbrB,EAAQa,IAAMwB,EAAEvC,OAAOwC,OACvB5C,KAEAM,EAAQqB,IAAK,mBACbrB,EAAQa,IAAM,GAClBqB,EAAOK,cAAcV,EAAO,SAd1BW,MAAM,0CA6CR,yBAAKzC,GAAG,kBACN,yBAAKoB,UAAU,WACb,yBAAKpB,GAAG,YAAYc,IAAKS,4CAA4CD,IAAI,mBAE3E,yBAAKF,UAAU,cACb,yBAAKpB,GAAG,cAAcc,IAAKS,4CAA4CD,IAAI,oBAC3E,yBAAKtB,GAAG,gBAAgBc,IAAKS,6BAAyBtC,EAAiBK,GAAoBoD,MAAQ,CAAEC,QAASnD,GAAmB8B,IAAI,wBAGzI,yBAAKtB,GAAG,sBACN,2BAAOyB,KAAK,QAAQmB,IAAI,IAAIC,IAAI,MAAMC,MAAOC,KAAKC,MAAuB,IAAjBxD,GAAuByD,MAAM,SAASjD,GAAG,UAAUkD,QArFpF,SAACrD,GAC5BJ,EAAkBI,EAAEE,OAAO+C,MAAQ,QAqF/B,sDAA4BC,KAAKC,MAAuB,IAAjBxD,GAAvC,MAGF,yBAAKQ,GAAG,iBAAiBwB,QA1CP,SAAC3B,GACrBA,EAAEgC,iBACF,IAAIsB,EAAgBjE,EAAQ2B,iBAAiB,CAE3CuC,SAAU,IACVC,SAAU,IACVC,sBAAuB,SACtBvC,YAEHhC,EAAU,CAACoE,EAAe5B,6BAAyBtC,EAAiBK,KACjEiE,QAAQxE,EAAUyE,MAAMC,OAAOjE,IAC/BkE,MAAK,SAAUC,GACd,IAAIC,EAAiB1D,SAASC,cAAc,iBAC5CyD,EAAeC,aAAa,OAAQF,GACpCC,EAAeC,aAAa,WAAY,YACxCD,EAAeE,aA2BjB,YACA,uBAAG9D,GAAG,eAAe+D,KAAK,GAAGC,SAAS,QAK5B,MAA6B9D,SAAS+D,eAAe,U","file":"static/js/main.a253a9b0.chunk.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport React, {useState, useEffect} from 'react';\nimport Cropper from 'cropperjs';\nimport debounce from 'lodash/debounce';\nimport './ProfileImageWatermarker.css';\nimport '../node_modules/cropperjs/dist/cropper.css'\nconst watermark = require('watermarkjs')\n\n\nconst watermarkOptions = ['/watermarks/yang1.png','/watermarks/yang2.png','/watermarks/yang3.png']\nlet cropper = ''\n\nfunction ProfileImageWatermarker() {\n  const [selectedWatermark, setSelectedWatermark] = useState(0);\n  const [watermarkLevel, setWatermarkLevel] = useState(0.75);\n\n  useEffect( () => {\n      buildCropper();\n    },[]);\n\n  const changeWaterMark = (e) => {\n    setSelectedWatermark(parseInt(e.target.id))\n  }\n\n  const adjustWatermarkLevel = (e) => {\n    setWatermarkLevel(e.target.value / 100)\n  }\n\n  const buildCropper = () => {\n    let cropBox = document.querySelector('#cropImage')\n    let cropPreview = document.querySelector('#cropPreview')\n    cropper = new Cropper(cropBox, {\n        aspectRatio: 1,\n        minCropBoxWidth: 100,\n        dragMode: 'move',\n        cropBoxMovable: false,\n        crop: debounce(() => {\n          let canvas = cropper.getCroppedCanvas()\n          cropPreview.src = canvas.toDataURL('image/png')\n        }, 5)\n      });\n  }\n\n  const buildWatermarkOptions = watermarkOptions.map( (i,j) => {\n      return <img className='watermarkOption' id={`${j}watermarkChoice`} key={`watermarkoption${j}`} alt={i} src={process.env.PUBLIC_URL + i} onClick={changeWaterMark} />\n    })\n\n  const makeCropper = (e) => {\n      e.preventDefault()\n      let upload = e.target.files;\n      if(upload.length === 0) return;\n      let cropBox = document.querySelector('#cropImage');\n\n      if(!upload[0].name.endsWith('.jpg') && !upload[0].name.endsWith('.png')) {\n        alert('Please select a .jpg or .png file.')\n        return\n      }\n\n      cropper.destroy()\n\n      let reader = new FileReader();\n      reader.onload = r => {\n          cropBox.alt= 'Image Editor Canvas'\n          cropBox.src = r.target.result;\n          buildCropper();\n          };\n          cropBox.alt= 'Loading Image...'\n          cropBox.src = '';\n      reader.readAsDataURL(upload[0]);\n  };\n\n  const downloadImage = (e) => {\n    e.preventDefault()\n    let cropSelection = cropper.getCroppedCanvas({\n      //width: 512, //doesn't work??\n      minWidth: 512,\n      maxWidth: 512,\n      imageSmoothingQuality: 'high'\n    }).toDataURL()\n\n    watermark([cropSelection, process.env.PUBLIC_URL + watermarkOptions[selectedWatermark]])\n      .dataUrl(watermark.image.center(watermarkLevel))\n      .then(function (url) {\n        let downloadAnchor = document.querySelector('#downloadLink');\n        downloadAnchor.setAttribute('href', url)\n        downloadAnchor.setAttribute('download', 'YANG2020');\n        downloadAnchor.click();\n      //cropper.destroy()\n      //document.querySelector('#cropImage').src = url\n\n      });\n    }\n\n  return (\n    <div id='ProfileImageWatermarker'>\n      <div id='watermarkOptions'>\n        {buildWatermarkOptions}\n      </div>\n      <input id='photoUpload' type='file' accept='.png, .jpg' name='photo' onChange={makeCropper} />\n      <div id='imageContainer'>\n        <div className='cropBox'>\n          <img id='cropImage' src={process.env.PUBLIC_URL + '/startImage.jpg'} alt='Editor Canvas' />\n        </div>\n        <div className='previewBox'>\n          <img id='cropPreview' src={process.env.PUBLIC_URL + '/startImage.jpg'} alt='Cropped Preview' />\n          <img id='cropWatermark' src={process.env.PUBLIC_URL + watermarkOptions[selectedWatermark]} style={ { opacity: watermarkLevel } } alt='Watermark Preview' />\n        </div>\n      </div>\n      <div id=\"transparencySlider\">\n        <input type=\"range\" min=\"0\" max=\"100\" value={Math.round(watermarkLevel * 100)} class=\"slider\" id=\"myRange\" onInput={adjustWatermarkLevel} />\n        <p>Watermark Transparency: {Math.round(watermarkLevel * 100)}%</p>\n      </div>\n\n      <div id='downloadButton' onClick={downloadImage}>Download</div>\n      <a id='downloadLink' href='' download='' />\n    </div>\n  );\n}\n\nReactDOM.render(<ProfileImageWatermarker />, document.getElementById('root'));\n"],"sourceRoot":""}