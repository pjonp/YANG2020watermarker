{"version":3,"sources":["index.js"],"names":["watermark","require","watermarkOptions","cropper","ReactDOM","render","useState","selectedWatermark","setSelectedWatermark","watermarkLevel","changeWaterMark","e","parseInt","target","id","useEffect","buildCropper","cropBox","document","querySelector","cropPreview","Cropper","aspectRatio","minCropBoxWidth","dragMode","cropBoxMovable","crop","debounce","canvas","getCroppedCanvas","src","toDataURL","buildWatermarkOptions","map","i","j","className","key","alt","process","onClick","downloadHelper","filename","file","tempElement","createElement","setAttribute","style","display","body","appendChild","click","removeChild","type","accept","name","onChange","preventDefault","upload","files","length","endsWith","destroy","reader","FileReader","onload","r","result","readAsDataURL","alert","opacity","cropSelection","minWidth","maxWidth","dataUrl","image","center","then","url","getElementById"],"mappings":"+NAMMA,G,YAAYC,EAAQ,KAGpBC,EAAmB,CAAC,wBAAwB,wBAAwB,yBACtEC,EAAU,GAsGdC,IAASC,OAAO,mBApGhB,WAAoC,IAAD,EACiBC,mBAAS,GAD1B,mBAC1BC,EAD0B,KACPC,EADO,OAEWF,mBAAS,KAFpB,mBAE1BG,EAF0B,KAI3BC,GAJ2B,KAIT,SAACC,GACvBH,EAAqBI,SAASD,EAAEE,OAAOC,OAG3CC,qBAAW,WACPC,MACA,IAEF,IAAMA,EAAe,WACnB,IAAIC,EAAUC,SAASC,cAAc,cACjCC,EAAcF,SAASC,cAAc,gBACzChB,EAAU,IAAIkB,IAAQJ,EAAS,CAC3BK,YAAa,EACbC,gBAAiB,IACjBC,SAAU,OACVC,gBAAgB,EAChBC,KAAMC,KAAS,WACb,IAAIC,EAASzB,EAAQ0B,mBACrBT,EAAYU,IAAMF,EAAOG,UAAU,eAClC,MAIHC,EAAwB9B,EAAiB+B,KAAK,SAACC,EAAEC,GACnD,OAAO,yBAAKC,UAAU,kBAAkBtB,GAAE,UAAKqB,EAAL,mBAAyBE,IAAG,yBAAoBF,GAAKG,IAAKJ,EAAGJ,IAAKS,6BAAyBL,EAAGM,QAAS9B,OAyC7I+B,EAAiB,SAACC,EAAUC,GACjC,IAAIC,EAAc1B,SAAS2B,cAAc,KACzCD,EAAYE,aAAa,OAAQH,GACjCC,EAAYE,aAAa,WAAYJ,GACrCE,EAAYG,MAAMC,QAAU,OAC5B9B,SAAS+B,KAAKC,YAAYN,GAC1BA,EAAYO,QACZjC,SAAS+B,KAAKG,YAAYR,IAG7B,OACE,yBAAK9B,GAAG,2BACN,yBAAKA,GAAG,oBACLkB,GAEH,2BAAOlB,GAAG,cAAcuC,KAAK,OAAOC,OAAO,aAAaC,KAAK,QAAQC,SArDrD,SAAC7C,GACjBA,EAAE8C,iBACF,IAAIC,EAAS/C,EAAEE,OAAO8C,MACtB,GAAqB,IAAlBD,EAAOE,OAAV,CACA,IAAI3C,EAAUC,SAASC,cAAc,cAErC,GAAIuC,EAAO,GAAGH,KAAKM,SAAS,SAAYH,EAAO,GAAGH,KAAKM,SAAS,QAAhE,CAKA1D,EAAQ2D,UAER,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAAC,GACZjD,EAAQqB,IAAK,sBACbrB,EAAQa,IAAMoC,EAAErD,OAAOsD,OACvBnD,KAEAC,EAAQqB,IAAK,mBACbrB,EAAQa,IAAM,GAClBiC,EAAOK,cAAcV,EAAO,SAd1BW,MAAM,0CA+CR,yBAAKvD,GAAG,kBACN,yBAAKsB,UAAU,WACb,yBAAKtB,GAAG,YAAYgB,IAAKS,4CAA4CD,IAAI,mBAE3E,yBAAKF,UAAU,cACb,yBAAKtB,GAAG,cAAcgB,IAAKS,4CAA4CD,IAAI,oBAC3E,yBAAKxB,GAAG,gBAAgBgB,IAAKS,6BAAyBrC,EAAiBK,GAAoBwC,MAAQ,CAAEuB,QAAS7D,GAAmB6B,IAAI,wBAGzI,yBAAKxB,GAAG,uBACR,yBAAKA,GAAG,iBAAiB0B,QAxCP,SAAC7B,GACrBA,EAAE8C,iBACF,IAAIc,EAAgBpE,EAAQ0B,iBAAiB,CAE3C2C,SAAU,IACVC,SAAU,MACT1C,YACH/B,EAAU,CAACuE,EAAehC,6BAAyBrC,EAAiBK,KACjEmE,QAAQ1E,EAAU2E,MAAMC,OAAOnE,IAC/BoE,MAAK,SAAUC,GAClBrC,EAAe,WAAYqC,QA8BzB,eAKU,MAA6B5D,SAAS6D,eAAe,U","file":"static/js/main.2c273b6f.chunk.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport React, {useState, useEffect} from 'react';\nimport Cropper from 'cropperjs';\nimport debounce from 'lodash/debounce';\nimport './ProfileImageWatermarker.css';\nimport '../node_modules/cropperjs/dist/cropper.css'\nconst watermark = require('watermarkjs')\n\n\nconst watermarkOptions = ['/watermarks/yang1.png','/watermarks/yang2.png','/watermarks/yang3.png']\nlet cropper = ''\n\nfunction ProfileImageWatermarker() {\n  const [selectedWatermark, setSelectedWatermark] = useState(0);\n  const [watermarkLevel, setWatermarkLevel] = useState(0.85);\n\n  const changeWaterMark = (e) => {\n    setSelectedWatermark(parseInt(e.target.id))\n  }\n\nuseEffect( () => {\n    buildCropper();\n  },[]);\n\n  const buildCropper = () => {\n    let cropBox = document.querySelector('#cropImage')\n    let cropPreview = document.querySelector('#cropPreview')\n    cropper = new Cropper(cropBox, {\n        aspectRatio: 1,\n        minCropBoxWidth: 100,\n        dragMode: 'move',\n        cropBoxMovable: false,\n        crop: debounce(() => {\n          let canvas = cropper.getCroppedCanvas()\n          cropPreview.src = canvas.toDataURL('image/png')\n        }, 5)\n      });\n  }\n\n  const buildWatermarkOptions = watermarkOptions.map( (i,j) => {\n      return <img className='watermarkOption' id={`${j}watermarkChoice`} key={`watermarkoption${j}`} alt={i} src={process.env.PUBLIC_URL + i} onClick={changeWaterMark} />\n    })\n\n  const makeCropper = (e) => {\n      e.preventDefault()\n      let upload = e.target.files;\n      if(upload.length === 0) return;\n      let cropBox = document.querySelector('#cropImage');\n\n      if(!upload[0].name.endsWith('.jpg') && !upload[0].name.endsWith('.png')) {\n        alert('Please select a .jpg or .png file.')\n        return\n      }\n\n      cropper.destroy()\n\n      let reader = new FileReader();\n      reader.onload = r => {\n          cropBox.alt= 'Image Editor Canvas'\n          cropBox.src = r.target.result;\n          buildCropper();\n          };\n          cropBox.alt= 'Loading Image...'\n          cropBox.src = '';\n      reader.readAsDataURL(upload[0]);\n  };\n\n  const downloadImage = (e) => {\n    e.preventDefault()\n    let cropSelection = cropper.getCroppedCanvas({\n      //width: 512, //doesn't work??\n      minWidth: 512,\n      maxWidth: 512,\n    }).toDataURL()\n    watermark([cropSelection, process.env.PUBLIC_URL + watermarkOptions[selectedWatermark]])\n      .dataUrl(watermark.image.center(watermarkLevel))\n      .then(function (url) {\n    downloadHelper('YANG2020', url)\n      });\n    }\n\n    const downloadHelper = (filename, file) => {\n     let tempElement = document.createElement('a');\n     tempElement.setAttribute('href', file)\n     tempElement.setAttribute('download', filename);\n     tempElement.style.display = 'none';\n     document.body.appendChild(tempElement);\n     tempElement.click();\n     document.body.removeChild(tempElement);\n }\n\n  return (\n    <div id='ProfileImageWatermarker'>\n      <div id='watermarkOptions'>\n        {buildWatermarkOptions}\n      </div>\n      <input id='photoUpload' type='file' accept='.png, .jpg' name='photo' onChange={makeCropper} />\n      <div id='imageContainer'>\n        <div className='cropBox'>\n          <img id='cropImage' src={process.env.PUBLIC_URL + '/startImage.jpg'} alt='Editor Canvas' />\n        </div>\n        <div className='previewBox'>\n          <img id='cropPreview' src={process.env.PUBLIC_URL + '/startImage.jpg'} alt='Cropped Preview' />\n          <img id='cropWatermark' src={process.env.PUBLIC_URL + watermarkOptions[selectedWatermark]} style={ { opacity: watermarkLevel } } alt='Watermark Preview' />\n        </div>\n      </div>\n      <div id='transparencySlider'/>\n      <div id='downloadButton' onClick={downloadImage}>Download</div>\n    </div>\n  );\n}\n\nReactDOM.render(<ProfileImageWatermarker />, document.getElementById('root'));\n"],"sourceRoot":""}