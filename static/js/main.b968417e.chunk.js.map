{"version":3,"sources":["index.js"],"names":["watermark","require","watermarkOptions","cropper","ReactDOM","render","useState","selectedWatermark","setSelectedWatermark","watermarkLevel","setWatermarkLevel","currentDisplay","setcurrentDisplay","useEffect","buildCropper","changeWaterMark","e","parseInt","target","id","cropBox","document","querySelector","cropPreview","Cropper","aspectRatio","minCropBoxWidth","dragMode","cropBoxMovable","crop","debounce","canvas","getCroppedCanvas","src","toDataURL","buildWatermarkOptions","map","i","j","className","key","alt","process","onClick","type","accept","name","onChange","preventDefault","upload","files","length","endsWith","destroy","reader","FileReader","onload","r","result","readAsDataURL","alert","style","opacity","min","max","value","Math","round","onInput","cropSelection","minWidth","maxWidth","imageSmoothingQuality","dataUrl","image","center","then","url","downloadAnchor","setAttribute","href","download","getElementById"],"mappings":"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","file":"static/js/main.b968417e.chunk.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport React, {useState, useEffect} from 'react';\nimport Cropper from 'cropperjs';\nimport debounce from 'lodash/debounce';\nimport './ProfileImageWatermarker.css';\nimport '../node_modules/cropperjs/dist/cropper.css'\nconst watermark = require('watermarkjs')\n\n\nconst watermarkOptions = ['/watermarks/yang1.png','/watermarks/yang2.png','/watermarks/yang3.png']\nlet cropper = ''\n\nfunction ProfileImageWatermarker() {\n  const [selectedWatermark, setSelectedWatermark] = useState(0);\n  const [watermarkLevel, setWatermarkLevel] = useState(0.75);\n  const [currentDisplay, setcurrentDisplay] = useState(1);\n\n  useEffect( () => {\n      buildCropper();\n    },[]);\n\n  const changeWaterMark = (e) => {\n    setSelectedWatermark(parseInt(e.target.id))\n  }\n\n  const adjustWatermarkLevel = (e) => {\n    setWatermarkLevel(e.target.value / 100)\n  }\n\n  const buildCropper = () => {\n    let cropBox = document.querySelector('#cropImage')\n    let cropPreview = document.querySelector('#cropPreview')\n    cropper = new Cropper(cropBox, {\n        aspectRatio: 1,\n        minCropBoxWidth: 100,\n        dragMode: 'move',\n        cropBoxMovable: false,\n        crop: debounce(() => {\n          let canvas = cropper.getCroppedCanvas()\n          cropPreview.src = canvas.toDataURL('image/png')\n        }, 5)\n      });\n  }\n\n  const buildWatermarkOptions = watermarkOptions.map( (i,j) => {\n      return <img className='watermarkOption' id={`${j}watermarkChoice`} key={`watermarkoption${j}`} alt={i} src={process.env.PUBLIC_URL + i} onClick={changeWaterMark} />\n    })\n\n  const makeCropper = (e) => {\n      e.preventDefault()\n      let upload = e.target.files;\n      if(upload.length === 0) return;\n      let cropBox = document.querySelector('#cropImage');\n\n      if(!upload[0].name.endsWith('.jpg') && !upload[0].name.endsWith('.png')) {\n        alert('Please select a .jpg or .png file.')\n        return\n      }\n\n      cropper.destroy()\n\n      let reader = new FileReader();\n      reader.onload = r => {\n          cropBox.alt= 'Image Editor Canvas'\n          cropBox.src = r.target.result;\n          buildCropper();\n          };\n          cropBox.alt= 'Loading Image...'\n          cropBox.src = '';\n      reader.readAsDataURL(upload[0]);\n  };\n\n  const createImage = (e) => {\n    e.preventDefault()\n    let cropSelection = cropper.getCroppedCanvas({\n      //width: 512, //doesn't work??\n      minWidth: 512,\n      maxWidth: 512,\n      imageSmoothingQuality: 'high'\n    }).toDataURL()\n\n    watermark([cropSelection, process.env.PUBLIC_URL + watermarkOptions[selectedWatermark]])\n      .dataUrl(watermark.image.center(watermarkLevel))\n      .then(function (url) {\n        let downloadAnchor = document.querySelector('#downloadLink');\n        downloadAnchor.setAttribute('href', url)\n        downloadAnchor.setAttribute('download', 'YANG2020');\n        setcurrentDisplay(2)\n        document.querySelector('#resultImage').src = url\n      //cropper.destroy()\n      //document.querySelector('#cropImage').src = url\n\n      });\n    };\n\n    const goBack = () => {\n      setcurrentDisplay(1)\n    }\n\n  /* //Not used\n    const copyImageLink = () => {\n      let imageSRC = document.querySelector('#resultImage').src\n      try{\n      navigator.clipboard.writeText(imageSRC).then( () => {\n          alert('Link Copied.')\n        }, (err) => {\n          alert(\"Copy to clipboard not supported on your browser/device. You'll need download and upload the image\")\n        });\n      }\n      catch{\n        alert(\"Copy to clipboard not supported on your browser/device. You'll need download and upload the image\")\n      }\n    }\n  */\n\n  return (\n    <div id='ProfileImageWatermarker'>\n      <div id='watermarkOptions'>\n        {currentDisplay === 1 ? buildWatermarkOptions : <p>Yang 2020 banner here?</p>}\n      </div>\n      <div id='infoContainer'>\n        { currentDisplay === 1 && <input id='photoUpload' type='file' accept='.png, .jpg' name='photo' onChange={makeCropper} /> }\n        { currentDisplay === 2 && <p>Discord link here?</p> }\n      </div>\n      <div id='imageContainer'>\n        <div className='previewBox' style={ {'display': currentDisplay === 1 ? 'block' : 'none'} }>\n          <img id='cropPreview' src={process.env.PUBLIC_URL + '/startImage.jpg'} alt='Cropped Preview' />\n          <img id='cropWatermark' src={process.env.PUBLIC_URL + watermarkOptions[selectedWatermark]} style={ { opacity: watermarkLevel } } alt='Watermark Preview' />\n        </div>\n        <div className='previewBox' style={ {'display': currentDisplay === 2 ? 'block' : 'none'} }>\n          <img id='resultImage' src='' alt='Final Preview' />\n        </div>\n\n        <div className='cropBox' style={ {'display': currentDisplay === 1 ? 'block' : 'none'} }>\n          <img id='cropImage' src={process.env.PUBLIC_URL + '/startImage.jpg'} alt='Editor Canvas' />\n        </div>\n        <div className='cropBox' style={ {'display': currentDisplay === 2 ? 'block' : 'none'} }>\n          <ul>\n            <li> Discord ???</li>\n            <li> CounterSocial https://counter.social/settings/profile</li>\n            <li> Twitter https://twitter.com/settings/profile</li>\n            <li> Facebook ???</li>\n            <li> Myspace https://myspace.com/settings/profile</li>\n          </ul>\n        </div>\n\n      </div>\n      { currentDisplay === 1 &&\n      <div id=\"transparencySlider\">\n        <input type=\"range\" min=\"10\" max=\"100\" value={Math.round(watermarkLevel * 100)} className=\"slider\" onInput={adjustWatermarkLevel} />\n        <p>Watermark Transparency: {Math.round(watermarkLevel * 100)}%</p>\n      </div>\n      }\n\n      <div className='button' onClick={createImage} style={ {'display': currentDisplay === 1 ? 'block' : 'none'} }>Create</div>\n      <div className='button' onClick={goBack} style={ {'display': currentDisplay === 2 ? 'block' : 'none'} }>Back</div>\n  {// <div className='button' onClick={copyImageLink} style={ {'display': currentDisplay === 2 ? 'block' : 'none'} }>Copy Link</div>\n  }\n      <a id='downloadLink' className='button' href='empty' download='' style={ {'display': currentDisplay === 2 ? 'block' : 'none'} }>Download</a>\n    </div>\n  );\n}\n\nReactDOM.render(<ProfileImageWatermarker />, document.getElementById('root'));\n"],"sourceRoot":""}